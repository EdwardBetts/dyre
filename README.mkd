Dyre - A Dynamic Reconfiguration Library for Haskell
====================================================

Dyre implements a basic interface for dynamically recompiling Haskell programs
with new configurations. The inspiration for all this is, of course, Xmonad's
reconfiguration functionality. It is similar in usage to the HConf library
which was written for the Yi editor.

But while HConf allows the program to be restarted under itself without losing
state data, Dyre leaves that capability up to the program using it. This design
choice was made because there are many possible programs which could need to use
dynamic recompilation, but for which the idea of persistent state is utterly
meaningless.

Basic Usage
-----------

The entire interface to the Dyre library consists of three items: a datatype for
configuration data, a set of default values, and a function which makes that data
into an entry-point function.

A complete, working example can be seen here:

    -- DyreExample.hs --
    module DyreExample ( dyreExample, Config(..), defaultConf ) where

    import qualified Config.Dyre as Dyre

    data Config = Config { message :: String }
    defaultConf = Config "Hello, world!"
    confError (Config message) error = Config $ "Error:" ++ error ++ "\n" ++ message

    realMain (Config message) = do
        putStrLn "Entered Main Function"
        putStrLn message

    dyreExample = Dyre.wrapMain Dyre.defaultParams
        { Dyre.projectName  = "dyreExample"
        , Dyre.showError    = confError
        , Dyre.realMain     = realMain
        }

    -- Main.hs --
    import DyreExample
    main = dyreExample defaultConf

The function `dyreExample` which is obtained from the `wrapMain` function is the
new program entry point. When called with a configuration, it will hand off the
control to Dyre, which will proceed to recompile and run the custom configuration
as needed. Eventually, the flow of control will pass back into the `realMain`
function, at which time Dyre is completely out of the picture.
